{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","name","sys","country","d","day","getDay","month","getMonth","date","getDate","year","getFullYear","dateBuilder","Date","Math","round","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"4JACMA,EACG,mCADHA,EAEI,2CAqEKC,MAlEf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACJC,EADI,KACGC,EADH,OAEmBF,mBAAS,IAF5B,mBAEJG,EAFI,KAEKC,EAFL,KA4BX,OACI,yBAAKC,UACuB,oBAAhBF,EAAQG,MACZH,EAAQG,KAAKC,KAAO,GACtB,WAEA,OACF,8BACI,yBAAKF,UAAU,cACX,2BACAG,KAAK,OACLH,UAAU,aACVI,YAAY,wBACZC,SAAU,SAAAC,GAAC,OAAIT,EAASS,EAAEC,OAAOC,QACjCA,MAAOZ,EACPa,WAvCD,SAAAC,GACK,UAAZA,EAAIC,KACJC,MAAK,UAAKnB,EAAL,qBAA0BG,EAA1B,+BAAsDH,IAC1DoB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACFjB,EAAWiB,GACXnB,EAAS,IACToB,QAAQC,IAAIF,UAmCa,oBAAhBlB,EAAQG,KACjB,6BACI,yBAAKD,UAAU,gBACX,yBAAKA,UAAU,YAAYF,EAAQqB,KAAnC,KAA2CrB,EAAQsB,IAAIC,SACvD,yBAAKrB,UAAU,QAlCnB,SAACsB,GACjB,IAGIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UACbC,EAJS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAIzGH,EAAEI,YACjBC,EAAOL,EAAEM,UACTC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,aAAkBE,EAAlB,YAA2BE,EAA3B,YAAmCE,GAyBQE,CAAY,IAAIC,QAE3C,yBAAKhC,UAAU,eACX,yBAAKA,UAAU,QACdiC,KAAKC,MAAMpC,EAAQG,KAAKC,MADzB,SAGA,yBAAKF,UAAU,WACdF,EAAQA,QAAQ,GAAGG,QAGvB,MCtDDkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,a","file":"static/js/main.1ee547dc.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nconst api= {\r\n    key: \"1d4a7dbf6b5c5b791a62d26c263949f0\",\r\n    base: \"https://api.openweathermap.org/data/2.5/\"\r\n}\r\n\r\nfunction App() {\r\n    const [query, setQuery] = useState('');\r\n    const [weather, setWeather] = useState({});\r\n\r\n    const search = evt => {\r\n        if (evt.key === \"Enter\") {\r\n            fetch (`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\r\n            .then(res => res.json())\r\n            .then(result => {\r\n                setWeather(result);\r\n                setQuery('');\r\n                console.log(result);\r\n            });\r\n        }\r\n    }\r\n\r\nconst dateBuilder = (d) => {\r\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n    \r\n    let day = days[d.getDay()];\r\n    let month = months[d.getMonth()];\r\n    let date = d.getDate();\r\n    let year = d.getFullYear();\r\n\r\n    return `${day}, ${month} ${date} ${year}`\r\n}\r\n\r\n    return (\r\n        <div className={\r\n            (typeof weather.main != \"undefined\")\r\n            ? ((weather.main.temp > 15)\r\n            ? 'app warm'\r\n            : 'app')\r\n            : 'app'}>\r\n            <main>\r\n                <div className=\"search-box\">\r\n                    <input \r\n                    type=\"text\"\r\n                    className=\"search-bar\"\r\n                    placeholder=\"Type a City to Search\"\r\n                    onChange={e => setQuery(e.target.value)}\r\n                    value={query}\r\n                    onKeyPress={search}\r\n                    />\r\n                </div>\r\n                {(typeof weather.main != \"undefined\") ? (\r\n                <div>\r\n                    <div className=\"location-box\">\r\n                        <div className=\"location\">{weather.name}, {weather.sys.country}</div>\r\n                        <div className=\"date\">{dateBuilder(new Date())}</div>\r\n                    </div>\r\n                    <div className=\"weather-box\">\r\n                        <div className=\"temp\">\r\n                        {Math.round(weather.main.temp)}Â°C\r\n                        </div>\r\n                        <div className=\"weather\">\r\n                        {weather.weather[0].main}</div>\r\n                    </div>\r\n                </div>\r\n                ) : ('')}\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}